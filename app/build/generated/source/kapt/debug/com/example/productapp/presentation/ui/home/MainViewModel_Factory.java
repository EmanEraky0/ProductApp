// Generated by Dagger (https://dagger.dev).
package com.example.productapp.presentation.ui.home;

import com.example.productapp.domain.usecases.getProductUseCase;
import com.example.productapp.utils.NetworkHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<getProductUseCase> mainRepositoryUseCaseProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  public MainViewModel_Factory(Provider<getProductUseCase> mainRepositoryUseCaseProvider,
      Provider<NetworkHelper> networkHelperProvider) {
    this.mainRepositoryUseCaseProvider = mainRepositoryUseCaseProvider;
    this.networkHelperProvider = networkHelperProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(mainRepositoryUseCaseProvider.get(), networkHelperProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<getProductUseCase> mainRepositoryUseCaseProvider,
      Provider<NetworkHelper> networkHelperProvider) {
    return new MainViewModel_Factory(mainRepositoryUseCaseProvider, networkHelperProvider);
  }

  public static MainViewModel newInstance(getProductUseCase mainRepositoryUseCase,
      NetworkHelper networkHelper) {
    return new MainViewModel(mainRepositoryUseCase, networkHelper);
  }
}
